// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/12/2025 02:14:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RISCV_core
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RISCV_core_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg debug_a;
reg debug_b;
reg enable;
reg reset;
// wires                                               
wire [15:0] LED_x31;
wire debug_led;

// assign statements (if any)                          
RISCV_core i1 (
// port map - connection between master ports and signals/registers   
	.LED_x31(LED_x31),
	.clk(clk),
	.debug_a(debug_a),
	.debug_b(debug_b),
	.debug_led(debug_led),
	.enable(enable),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// debug_a
initial
begin
	debug_a = 1'b0;
end 

// debug_b
initial
begin
	debug_b = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
end 
endmodule

