typedef enum logic [2:0] {R, I, B, J, U} inst_type_t;

module Decoder(
input logic [31:0] instruction,

output logic [4:0] rd, rs1, rs2,
output logic [31:0] imm,

output inst_type_t inst_type);

logic [6:0] opcode;
logic [2:0] funct3;
logic [7:0] funct7;


assign opcode = instruction[6:0];
assign rd     = instruction[11:7];
assign funct3 = instruction[14:12];
assign rs1    = instruction[19:15];
assign rs2    = instruction[24:20];
assign funct7 = instruction[31:25];

always_comb begin
	case(opcode)
	7'b0110011: inst_type = R;
	7'b0010011: inst_type = I;
	7'b1100011: inst_type = B;
	7'b1101111: inst_type = J;
	7'b0110111: inst_type = U;
	default: inst_type = R;
	endcase
end

always_comb begin
	case (inst_type)
		I: imm <= {{20{instruction[31]}}, instruction[31:20]};
		B: imm <= {{19{instruction[31]}}, instruction[31], instruction[7], instruction[30:25], instruction[11:8], 1'b0};
		U: imm <= {instruction[31:12], 12'b0};
		J: imm <= {{11{instruction[31]}}, instruction[31], instruction[19:12], instruction[20], instruction[30:21], 1'b0};
		default: imm <= 32'b0;
	endcase
end

endmodule
		
